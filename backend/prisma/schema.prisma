// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User{
  id              String                @id @default(uuid())
  username        String                @unique
  password        String
  createdAt       DateTime              @default(now())
  updatedAt       DateTime              @updatedAt


  questions       Qna[]
  comments        Comment[]
  likes           Like[]
}


model Qna{
  id              String                @id @default(uuid())
  country         String                
  heading         String
  description     String
  likesCount      Int                   @default(0)
  createdAt       DateTime              @default(now())
  updatedAt       DateTime              @updatedAt

  userId          String
  user            User                  @relation(fields: [userId], references: [id])
  comment         Comment[]
  likes           Like[]
}

model Comment{
  id              String                @id @default(uuid())
  heading         String
  description     String
  createdAt       DateTime              @default(now())
  updatedAt       DateTime              @updatedAt

  userID          String
  user            User                  @relation(fields: [userID], references: [id])

  qnaId           String
  qna             Qna                   @relation(fields: [qnaId], references: [id])
}

model Like{
  id              String              @id @default(uuid())
  userId          String
  qnaId           String
  createdAt       DateTime            @default(now())

  user            User                @relation(fields: [userId], references: [id])
  qna             Qna                 @relation(fields: [qnaId], references: [id])

  @@unique([userId, qnaId]) // one like per user per qna
}