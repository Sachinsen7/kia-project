// prisma/schema.prisma
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id        String    @id @default(uuid())
  username  String    @unique
  email     String?
  password  String
  role      String    @default("participant")
  approved  Boolean   @default(false)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  questions Qna[]
  comments  Comment[]
  likes     Like[]
  uploads   Upload[]
  pageViews PageView[]   // ðŸ‘ˆ added opposite relation
}

model Qna {
  id          String    @id @default(uuid())
  country     String
  heading     String
  description String
  likesCount  Int       @default(0)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  userId   String
  user     User      @relation(fields: [userId], references: [id])
  comments Comment[]
  likes    Like[]
}

model Comment {
  id          String   @id @default(uuid())
  heading     String
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  userId String
  user   User    @relation(fields: [userId], references: [id])

  qnaId String
  qna   Qna     @relation(fields: [qnaId], references: [id])
}

model Like {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())

  userId String
  user   User @relation(fields: [userId], references: [id])

  qnaId String
  qna   Qna  @relation(fields: [qnaId], references: [id])

  @@unique([userId, qnaId])
}

model Upload {
  id        String   @id @default(uuid())
  filename  String
  url       String
  mimetype  String
  size      Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId String
  user   User @relation(fields: [userId], references: [id])
}

model PageView {
  id        String   @id @default(uuid())
  path      String
  ip        String?       // optional
  userId    String?       // optional (visitors might be anonymous)
  user      User?  @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
}
